
module Main( main ) where

import System( getArgs )
import List( nub, group, sort, maximumBy, find )
import Char


fib 0 = 0
fib 1 = 1
fib (n+1) = fib n + fib(n -1)


allFibs = [fib x | x <- [0..]]


-- Problem5

p5 k = foldl lcm 1 [2..k]

p5' k = foldl lcm' 1 [2..k]
--    where 

lcm' x y = numify $ lcm1 xpf ypf [] where
    xpf = primeFactors x
    ypf = primeFactors y
numify = foldl (\t -> \(x,p) ->  t * (x^p)) 1

lcm1 [] [] r = r
lcm1 [] y r = r ++ y
lcm1 x [] r = r ++ x
lcm1 ((x,xp):xs) ((y,yp):ys) r | x == y = lcm1 xs ys ((x, max xp yp):r)
                               | x < y = lcm1 xs ((y,yp):ys) ((x, xp):r)
                               | x > y = lcm1 ((x,xp):xs) ys ((y, yp):r)

primeFactors n = sort [(head l, length l) | l <- group pfList]
    where
        pfList =  step n 2 []
        step 1 _ _ = [1]
        step n d l = case divMod n d of
            (1,  0) -> n:l
            (n', 0) -> step n' (d) (d:l)
            (n', _) -> step n  (d+1) l 


-- Problem4 
p4 = max' [x*y| x<-threeDigNums, y <-threeDigNums, isPal(x*y) ]
    where 
        max' (x:xs) = foldl max x xs
        threeDigNums = [100..999]
        isPal n = reverse s == s where s = show n


-- Problem6
p6 n =  ((sum nums)^2) - sum [x*x| x<-nums]  where nums = [1..n]

-- Problem3 
p3 n = let (x, p) = last $ primeFactors n in x


-- Problem7
divByAny primes n = any (\d -> mod n d == 0) primes

findAPrime soFar start = head [ cand | cand <-[start..], 
                                not $ divByAny soFar cand]

p7 nth = head $ drop (nth -1 ) $ findAllPrimes [] 2

findAllPrimes l n = found : findAllPrimes (l++[found]) found
    where found = findAPrime l n

-- Problem8
thousandDigitNum = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

-- p8 k = maximum [ product fiveConsec | fiveConsec <- fiveConsecs]
p8 k = maximumBy (\(a,sa) -> \(b,sb) -> compare a b) [(product fiveConsec, fiveConsec) | fiveConsec <- fiveConsecs]
    where
        fiveConsecs = [[Char.digitToInt c|c<-s] | s <- strings]
        s = show thousandDigitNum
        len = length s 
        strings = [take k $ drop start s | start <-[0..len-k]]


-- Problem9
p9 abc = case (find (\(a,b,c) -> a+b+c == abc) pyTrips) of
            Just (a,b,c) -> a * b * c
            _ -> 0
    where
        pyTrips = [(a,b,c)| a<-[1..],b<-[1..a],c<-[1..b],  
                            c^2+b^2==a^2]


-- Problem10
p10 n = sum $ sieve n
    where
        sieve n = sieve' [2..n]
        sieve' (x:xs) = x : sieve' (remove_every_nth x xs)
        sieve' [] = []
        remove_every_nth = recur 1
        recur _ _ []     = []
        recur i n (x:xs) = if i == n
            then recur 1 n xs
            else x:recur (i+1) n xs


-- Problem11
p11 = find (\x -> length(factors(x)) > 500) tns
    where 
        tns = [tn(x) | x <-[1..] ]
        tn x = sum [1..x]
        factors n = [ x | x <- [1..(n `div` 2)], n `mod` x == 0] 


-- Problem13
hundred50DigitNos = [
    37107287533902102798797998220837590246510135740250,
    46376937677490009712648124896970078050417018260538,
    74324986199524741059474233309513058123726617309629,
    91942213363574161572522430563301811072406154908250,
    23067588207539346171171980310421047513778063246676,
    89261670696623633820136378418383684178734361726757,
    28112879812849979408065481931592621691275889832738,
    44274228917432520321923589422876796487670272189318,
    47451445736001306439091167216856844588711603153276,
    70386486105843025439939619828917593665686757934951,
    62176457141856560629502157223196586755079324193331,
    64906352462741904929101432445813822663347944758178,
    92575867718337217661963751590579239728245598838407,
    58203565325359399008402633568948830189458628227828,
    80181199384826282014278194139940567587151170094390,
    35398664372827112653829987240784473053190104293586,
    86515506006295864861532075273371959191420517255829,
    71693888707715466499115593487603532921714970056938,
    54370070576826684624621495650076471787294438377604,
    53282654108756828443191190634694037855217779295145,
    36123272525000296071075082563815656710885258350721,
    45876576172410976447339110607218265236877223636045,
    17423706905851860660448207621209813287860733969412,
    81142660418086830619328460811191061556940512689692,
    51934325451728388641918047049293215058642563049483,
    62467221648435076201727918039944693004732956340691,
    15732444386908125794514089057706229429197107928209,
    55037687525678773091862540744969844508330393682126,
    18336384825330154686196124348767681297534375946515,
    80386287592878490201521685554828717201219257766954,
    78182833757993103614740356856449095527097864797581,
    16726320100436897842553539920931837441497806860984,
    48403098129077791799088218795327364475675590848030,
    87086987551392711854517078544161852424320693150332,
    59959406895756536782107074926966537676326235447210,
    69793950679652694742597709739166693763042633987085,
    41052684708299085211399427365734116182760315001271,
    65378607361501080857009149939512557028198746004375,
    35829035317434717326932123578154982629742552737307,
    94953759765105305946966067683156574377167401875275,
    88902802571733229619176668713819931811048770190271,
    25267680276078003013678680992525463401061632866526,
    36270218540497705585629946580636237993140746255962,
    24074486908231174977792365466257246923322810917141,
    91430288197103288597806669760892938638285025333403,
    34413065578016127815921815005561868836468420090470,
    23053081172816430487623791969842487255036638784583,
    11487696932154902810424020138335124462181441773470,
    63783299490636259666498587618221225225512486764533,
    67720186971698544312419572409913959008952310058822,
    95548255300263520781532296796249481641953868218774,
    76085327132285723110424803456124867697064507995236,
    37774242535411291684276865538926205024910326572967,
    23701913275725675285653248258265463092207058596522,
    29798860272258331913126375147341994889534765745501,
    18495701454879288984856827726077713721403798879715,
    38298203783031473527721580348144513491373226651381,
    34829543829199918180278916522431027392251122869539,
    40957953066405232632538044100059654939159879593635,
    29746152185502371307642255121183693803580388584903,
    41698116222072977186158236678424689157993532961922,
    62467957194401269043877107275048102390895523597457,
    23189706772547915061505504953922979530901129967519,
    86188088225875314529584099251203829009407770775672,
    11306739708304724483816533873502340845647058077308,
    82959174767140363198008187129011875491310547126581,
    97623331044818386269515456334926366572897563400500,
    42846280183517070527831839425882145521227251250327,
    55121603546981200581762165212827652751691296897789,
    32238195734329339946437501907836945765883352399886,
    75506164965184775180738168837861091527357929701337,
    62177842752192623401942399639168044983993173312731,
    32924185707147349566916674687634660915035914677504,
    99518671430235219628894890102423325116913619626622,
    73267460800591547471830798392868535206946944540724,
    76841822524674417161514036427982273348055556214818,
    97142617910342598647204516893989422179826088076852,
    87783646182799346313767754307809363333018982642090,
    10848802521674670883215120185883543223812876952786,
    71329612474782464538636993009049310363619763878039,
    62184073572399794223406235393808339651327408011116,
    66627891981488087797941876876144230030984490851411,
    60661826293682836764744779239180335110989069790714,
    85786944089552990653640447425576083659976645795096,
    66024396409905389607120198219976047599490197230297,
    64913982680032973156037120041377903785566085089252,
    16730939319872750275468906903707539413042652315011,
    94809377245048795150954100921645863754710598436791,
    78639167021187492431995700641917969777599028300699,
    15368713711936614952811305876380278410754449733078,
    40789923115535562561142322423255033685442488917353,
    44889911501440648020369068063960672322193204149535,
    41503128880339536053299340368006977710650566631954,
    81234880673210146739058568557934581403627822703280,
    82616570773948327592232845941706525094512325230608,
    22918802058777319719839450180888072429661980811197,
    77158542502016545090413245809786882778948721859617,
    72107838435069186155435662884062257473692284509516,
    20849603980134001723930671666823555245252804609722,
    53503534226472524250874054075591789781264330331690 ]
p13 = take 10 $ show $ sum hundred50DigitNos

p16 = [Char.ord(c)-48 | c <-show(2^1000)]

----------------------------------------------------------------
-- Go!

ep 2 = show $ sum $ filter even $ takeWhile (< 4000000) allFibs

ep 5 = show $ p5 20

ep 6 = show $ p6 101

ep 3 = show $ p3 600851475143

ep 9 = show $ p9 1000

ep 10 = show $ p10 (2 * 1000 * 1000)

ep 16 = show p16

ep _ = "Did not do this one."


main = do
  args <- getArgs
  print $ ep $ (read  (head args)::Int)
